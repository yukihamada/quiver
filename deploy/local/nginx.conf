events {
    worker_connections 1024;
}

http {
    upstream signalling {
        server signalling:8444;
    }
    
    upstream gateway {
        server gateway:8080;
    }
    
    upstream bootstrap1_ws {
        server bootstrap1:4003;
    }
    
    upstream bootstrap2_ws {
        server bootstrap2:4003;
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name localhost signal.localhost bootstrap1.localhost bootstrap2.localhost;
        return 301 https://$server_name$request_uri;
    }

    # Signalling server
    server {
        listen 443 ssl http2;
        server_name signal.localhost;
        
        ssl_certificate /etc/nginx/certs/localhost.crt;
        ssl_certificate_key /etc/nginx/certs/localhost.key;
        
        location /signal {
            proxy_pass http://signalling;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeout
            proxy_read_timeout 3600;
            proxy_send_timeout 3600;
        }
        
        location /health {
            proxy_pass http://signalling;
        }
    }

    # Bootstrap node 1 WebSocket
    server {
        listen 443 ssl http2;
        server_name bootstrap1.localhost;
        
        ssl_certificate /etc/nginx/certs/localhost.crt;
        ssl_certificate_key /etc/nginx/certs/localhost.key;
        
        location /p2p {
            proxy_pass http://bootstrap1_ws;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            
            proxy_read_timeout 3600;
            proxy_send_timeout 3600;
        }
    }

    # Bootstrap node 2 WebSocket
    server {
        listen 443 ssl http2;
        server_name bootstrap2.localhost;
        
        ssl_certificate /etc/nginx/certs/localhost.crt;
        ssl_certificate_key /etc/nginx/certs/localhost.key;
        
        location /p2p {
            proxy_pass http://bootstrap2_ws;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            
            proxy_read_timeout 3600;
            proxy_send_timeout 3600;
        }
    }

    # Gateway API
    server {
        listen 443 ssl http2;
        server_name api.localhost;
        
        ssl_certificate /etc/nginx/certs/localhost.crt;
        ssl_certificate_key /etc/nginx/certs/localhost.key;
        
        location / {
            proxy_pass http://gateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "*" always;
            
            if ($request_method = OPTIONS) {
                return 204;
            }
        }
    }
}