package api

import (
    "encoding/json"
    "net/http"
    "time"
)

// InferenceRequest represents an inference request
type InferenceRequest struct {
    Prompt    string `json:"prompt"`
    Model     string `json:"model"`
    MaxTokens int    `json:"max_tokens,omitempty"`
    Stream    bool   `json:"stream,omitempty"`
}

// InferenceResponse represents an inference response
type InferenceResponse struct {
    Completion string `json:"completion"`
    Model      string `json:"model"`
    Usage      struct {
        PromptTokens     int `json:"prompt_tokens"`
        CompletionTokens int `json:"completion_tokens"`
        TotalTokens      int `json:"total_tokens"`
    } `json:"usage"`
    Receipt struct {
        ProviderID string `json:"provider_id"`
        Timestamp  int64  `json:"timestamp"`
        Signature  string `json:"signature"`
    } `json:"receipt"`
}

// HandleInference handles inference requests
func HandleInference(w http.ResponseWriter, r *http.Request) {
    if r.Method != http.MethodPost {
        http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
        return
    }

    var req InferenceRequest
    if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
        http.Error(w, "Invalid request body", http.StatusBadRequest)
        return
    }

    // Validate request
    if req.Prompt == "" {
        http.Error(w, "Prompt is required", http.StatusBadRequest)
        return
    }
    if req.Model == "" {
        req.Model = "llama3.2:3b" // Default model
    }

    // For now, return a mock response
    // TODO: Implement actual P2P inference
    resp := InferenceResponse{
        Completion: "This is a test response from QUIVer P2P network. In production, this would be generated by a provider node running " + req.Model + ".",
        Model:      req.Model,
    }
    
    resp.Usage.PromptTokens = len(req.Prompt) / 4 // Rough estimate
    resp.Usage.CompletionTokens = len(resp.Completion) / 4
    resp.Usage.TotalTokens = resp.Usage.PromptTokens + resp.Usage.CompletionTokens
    
    resp.Receipt.ProviderID = "12D3KooWExample"
    resp.Receipt.Timestamp = time.Now().Unix()
    resp.Receipt.Signature = "0xmocksignature"

    w.Header().Set("Content-Type", "application/json")
    json.NewEncoder(w).Encode(resp)
}

// HandleGenerate is an alias for HandleInference
func HandleGenerate(w http.ResponseWriter, r *http.Request) {
    HandleInference(w, r)
}