name: Sync DNS Records to Cloudflare

on:
  push:
    branches:
      - main
    paths:
      - 'dns/records.yaml'
  workflow_dispatch:

jobs:
  sync-dns:
    name: Sync DNS Records
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install pyyaml requests
      
      - name: Sync DNS records
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          python3 - <<'EOF'
          import yaml
          import requests
          import os
          import sys
          
          # Load configuration
          with open('dns/records.yaml', 'r') as f:
              config = yaml.safe_load(f)
          
          # Cloudflare API setup
          api_token = os.environ['CLOUDFLARE_API_TOKEN']
          zone_id = os.environ['CLOUDFLARE_ZONE_ID']
          headers = {
              'Authorization': f'Bearer {api_token}',
              'Content-Type': 'application/json'
          }
          base_url = f'https://api.cloudflare.com/client/v4/zones/{zone_id}/dns_records'
          
          # Get existing records
          response = requests.get(base_url, headers=headers)
          if response.status_code != 200:
              print(f"Failed to get existing records: {response.text}")
              sys.exit(1)
          
          existing_records = {}
          for r in response.json()['result']:
              # Handle root domain
              name = r['name']
              if name == config['domain']:
                  name = '@'
              else:
                  name = name.replace(f'.{config["domain"]}', '')
              existing_records[(r['type'], name)] = r
          
          # Process all records
          all_records = []
          for section in ['frontend', 'backend']:
              if section in config:
                  all_records.extend(config[section])
          
          created = 0
          updated = 0
          errors = 0
          
          for record in all_records:
              record_type = record['type']
              record_name = record['name']
              
              # Handle @ for root domain
              if record_name == '@':
                  full_name = config['domain']
              else:
                  full_name = f"{record_name}.{config['domain']}"
              
              # Check if record exists
              key = (record_type, record_name)
              existing = existing_records.get(key)
              
              data = {
                  'type': record_type,
                  'name': full_name,
                  'content': record['content'],
                  'proxied': record.get('proxied', True),
                  'ttl': 1 if record.get('proxied', True) else 3600,
                  'comment': record.get('comment', '')
              }
              
              if existing:
                  # Update existing record
                  update_url = f"{base_url}/{existing['id']}"
                  response = requests.put(update_url, headers=headers, json=data)
                  if response.status_code == 200:
                      print(f"‚úÖ Updated: {record_type} {full_name} -> {record['content']}")
                      updated += 1
                  else:
                      print(f"‚ùå Failed to update {full_name}: {response.text}")
                      errors += 1
              else:
                  # Create new record
                  response = requests.post(base_url, headers=headers, json=data)
                  if response.status_code == 200:
                      print(f"‚úÖ Created: {record_type} {full_name} -> {record['content']}")
                      created += 1
                  else:
                      print(f"‚ùå Failed to create {full_name}: {response.text}")
                      errors += 1
          
          print(f"\nüìä Summary:")
          print(f"  Created: {created}")
          print(f"  Updated: {updated}")
          print(f"  Errors: {errors}")
          
          if errors > 0:
              sys.exit(1)
          EOF
      
      - name: Verify DNS propagation
        run: |
          echo "üîç Checking DNS propagation..."
          sleep 5
          
          # Check a few key subdomains
          for subdomain in "" "api" "docs" "explorer"; do
              if [ -z "$subdomain" ]; then
                  domain="quiver.network"
              else
                  domain="${subdomain}.quiver.network"
              fi
              
              echo "Checking $domain..."
              dig +short CNAME $domain @1.1.1.1 || true
          done